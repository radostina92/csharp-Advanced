using System;
using System.Linq;
using System.Collections.Generic;
namespace predicateParty
{
    class predicateParty
    {
        static void Main(string[] args)
        {
            List<string> names = Console.ReadLine().Split().ToList();
            Func<string, int, bool> lengthFunc = (name, length) => name.Length == length;
            Func<string, string, bool> startsWithFunc = (name, startsWithString) => name.StartsWith(startsWithString);
            Func<string, string, bool> endsWithFunc = (name, endsWithString) => name.EndsWith(endsWithString);
            string command = string.Empty;
            while ((command = Console.ReadLine()) != "Party!")
            {
                var commandInfo = command.Split();
                string action = commandInfo[0];
                var consition = commandInfo[1];
                var parameter = commandInfo[2];
                if (action == "Double")
                {
                    if (consition == "Length")
                    {
                        int length = int.Parse(parameter);
                        var temp = names.Where(x => lengthFunc(x, length)).ToList();
                        foreach (var item in temp)
                        {
                            int index = temp.IndexOf(item);
                            names.Insert(index, item);
                        }

                    }
                    else if (consition == "StartsWith")
                    {
                        var temp = names.Where(x => startsWithFunc(x, parameter)).ToList();
                        foreach (var item in temp)
                        {
                            int index = temp.IndexOf(item);
                            names.Insert(index, item);
                        }
                    }
                    else if (consition == "EndsWith")
                    {
                        var temp = names.Where(x => endsWithFunc(x, parameter)).ToList();
                        foreach (var item in temp)
                        {
                            int index = temp.IndexOf(item);
                            names.Insert(index, item);
                        }
                    }
                }
                else if (action == "Remove")
                {
                    if (consition == "Length")
                    {
                        int length = int.Parse(parameter);
                        names = names.Where(x => !lengthFunc(x, length)).ToList();
                      

                    }
                    else if (consition == "StartsWith")
                    {
                        names = names.Where(x => !startsWithFunc(x, parameter)).ToList();
                       
                    }
                    else if (consition == "EndsWith")
                    {
                        names = names.Where(x => !endsWithFunc(x, parameter)).ToList();
                        
                    }
                }
            }

            if (names.Count > 0)
            {
                Console.WriteLine(string.Join(", ", names) + " are going to the party!");
            }
            else
            {
                Console.WriteLine("Nobody is going to the party!");
            }
        }
    }
}
